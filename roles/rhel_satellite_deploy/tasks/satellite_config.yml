---
- name: Satellite configuration
  ansible.builtin.import_role:
    name: redhat.satellite_operations.installer
  vars:
    satellite_installer_scenario: "{{ sat_scenario }}"
    satellite_installer_options:
        - '--foreman-initial-organization "{{ sat_org }}"'
        - '--foreman-initial-admin-password "{{ sat_pass }}"'
        - '--tuning "{{ sat_profile }}"'
  no_log: true
  tags: installsat

- name: Proxy configuration
  redhat.satellite.http_proxy:
    username: "{{ sat_user }}"
    password: "{{ sat_pass }}"
    server_url: "https://{{ ansible_facts['nodename'] }}"
    organizations:
      - "{{ sat_org }}"
    name: mproxy
    url: "{{ sat_proxy }}"
    state: present
  no_log: true  
  tags: proxy

- name: Default proxy configuration
  redhat.satellite.setting:
    username: "{{ sat_user }}"
    password: "{{ sat_pass }}"
    server_url: "https://{{ ansible_facts['nodename'] }}"
    name: content_default_http_proxy
    value: mproxy
  no_log: true  
  tags: proxy

- name: Download manifest
  ansible.builtin.get_url:
    url: "{{ sat_manifest }}"
    dest: "/root/manifest.zip"
    mode: '0600'
    force: true
  tags: download_manifest  

- name: Import manifest
  redhat.satellite.subscription_manifest:
    username: "{{ sat_user }}"
    password: "{{ sat_pass }}"
    server_url: "https://{{ ansible_facts['nodename'] }}"
    organization: "{{ sat_org }}"
    manifest_path: "/root/manifest.zip"
    state: present
  ignore_errors: true # If error "Manifest is older than existing data"
  no_log: true
  tags: import_manifest

- name: Refresh manifest via Red Hat
  redhat.satellite.subscription_manifest:
    username: "{{ sat_user }}"
    password: "{{ sat_pass }}"
    server_url: "https://{{ ansible_facts['nodename'] }}"
    organization: "{{ sat_org }}"
    state: refreshed
  no_log: true  
  tags: refresh_manifest

- name: Import Red Hat repositories
  ansible.builtin.import_role:
    name: redhat.satellite.repositories
  vars:
    satellite_organization: "{{ sat_org }}"
    satellite_server_url: "https://{{ ansible_facts['nodename'] }}"
    satellite_username: "{{ sat_user }}"
    satellite_password: "{{ sat_pass }}"
    satellite_products: "{{ satellite_repositories_products_vars }}"
  no_log: true  
  tags: repos

- name: Synchronize repositories (takes some time)
  redhat.satellite.repository_sync:
    username: "{{ sat_user }}"
    password: "{{ sat_pass }}"
    server_url: "https://{{ ansible_facts['nodename'] }}"
    organization: "{{ sat_org }}"
    product: "{{ product_name }}"    
  loop: "{{ satellite_sync_products_vars }}"
  loop_control:
    loop_var: product_name
  register: sync_results
  no_log: true 
  tags: repos

- name: Create synchronization plan
  ansible.builtin.import_role:
    name: redhat.satellite.sync_plans
  vars:
    satellite_organization: "{{ sat_org }}"
    satellite_server_url: "https://{{ ansible_facts['nodename'] }}"
    satellite_username: "{{ sat_user }}"
    satellite_password: "{{ sat_pass }}"
    satellite_sync_plans:
      - name: Daily Sync
        interval: daily
        sync_date: "2023-11-07 03:00:00 UTC"
        products:
          - Red Hat Enterprise Linux for x86_64
          - Red Hat Satellite
          - Red Hat Satellite Capsule
  no_log: true        
  tags: sync-plan

- name: Create lifecycle environment
  ansible.builtin.import_role:
    name: redhat.satellite.lifecycle_environments
  vars:
    satellite_organization: "{{ sat_org }}"
    satellite_server_url: "https://{{ ansible_facts['nodename'] }}"
    satellite_username: "{{ sat_user }}"
    satellite_password: "{{ sat_pass }}"
    satellite_lifecycle_environments: "{{ satellite_lifecycle_environments_vars }}"
  no_log: true  
  tags: lifecycle

- name: Create content view
  ansible.builtin.import_role:
    name: redhat.satellite.content_views
  vars:
    satellite_organization: "{{ sat_org }}"
    satellite_server_url: "https://{{ ansible_facts['nodename'] }}"
    satellite_username: "{{ sat_user }}"
    satellite_password: "{{ sat_pass }}"
    satellite_content_views: "{{ satellite_content_views_vars }}"
  no_log: true  
  tags: content-view

- name: Publish content view
  ansible.builtin.import_role:
    name: redhat.satellite.content_view_publish
  vars:
    satellite_organization: "{{ sat_org }}"
    satellite_server_url: "https://{{ ansible_facts['nodename'] }}"
    satellite_username: "{{ sat_user }}"
    satellite_password: "{{ sat_pass }}"
    satellite_content_views: 
      - "{{ sat_cv_admin }}"
  no_log: true    
  tags: publish

- name: Promote content view to test/dev/qa/preprod/prod
  redhat.satellite.content_view_version:
    organization: "{{ sat_org }}"
    server_url: "https://{{ ansible_facts['nodename'] }}"
    username: "{{ sat_user }}"
    password: "{{ sat_pass }}"
    content_view: "{{ sat_cv_admin }}"
    lifecycle_environments: "{{ satellite_promotion_environments_vars }}"
    state: present
  no_log: true  
  tags: promote

- name: Create activation key actions
  ansible.builtin.import_role:
    name: redhat.satellite.activation_keys
  vars:
    satellite_organization: "{{ sat_org }}"
    satellite_server_url: "https://{{ ansible_facts['nodename'] }}"
    satellite_username: "{{ sat_user }}"
    satellite_password: "{{ sat_pass }}"
    satellite_activation_keys: "{{ satellite_activation_keys_vars }}"
  no_log: true  
  tags: act_key

- name: force all notified handlers to run at this point
  meta: flush_handlers  